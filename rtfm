#!/usr/bin/env bash
set -euo pipefail
declare -- PRG0 PRGDIR PRG
PRG0="$(readlink -en -- "$0")"
PRGDIR="${PRG0%/*}"
PRG="${PRG0##*/}"

# Initialize COLUMNS for md2ansi if not already set
[[ -z "${COLUMNS:-}" ]] && COLUMNS=$(tput cols 2>/dev/null || echo 80)
export COLUMNS

declare -- TLDR MD2ANSI
# tldr optional, but recommended
TLDR=$(command -v tldr 2>/dev/null)
# md2ansi optional, but recommended
MD2ANSI=$(command -v md2ansi 2>/dev/null || echo 'cat -s -')

usage() {
  cat <<EOT
$PRG - Read The Fucking Manuals

A command-line utility that searches for documentation about commands
across multiple help systems.

Searches for command help in order:

1. Bash builtin help
2. Man pages
3. Info pages
4. TLDR pages (if tldr installed)

All found pages are concatenated.

Usage: $PRG [OPTIONS] command

Options:
  -r,--rebuild-lists  Rebuild command lists for each help command
  -h,--help           This help

Examples:
  $PRG rsync
  $PRG declare
  $PRG ls
  $PRG git
EOT
  exit "${1:-0}"
}

main() {
  local -- cmd='' pagebreak=''

  (( $# )) || >&2 usage 1

  while (($#)); do
    case $1 in
      -r|--rebuild-lists)
                  rebuild_help_lists
                  exit 0
                  ;;
      -h|--help)  usage 0 ;;
      --install|--update)
                  sudo -ln &>/dev/null || {
                     >&2 echo "$PRG: Install/Update requires root, or non-interactive sudo privileges."
                     exit 1
                  }
                  sudo -n "$0" installupdate --verbose; exit
                  ;;
      -*)         >&2 echo "$PRG: Invalid option '$1'" ;;
      *)          [[ -n $cmd ]] && { >&2 echo "$PRG: Too many arguments"; exit 22; }
                  cmd="$1"
                  ;;
    esac
    shift
  done

  ( if grep -q -m1 "^${cmd}$" "$PRGDIR"/builtin.list 2>/dev/null; then
      echo -e "# BUILTIN\n"
      builtin help -m "$cmd" 2>/dev/null || builtin help "$cmd"
      pagebreak="\n---\n"
    fi

    if grep -q -m1 ^"$cmd"$ "$PRGDIR"/man.list 2>/dev/null; then
      echo -e "$pagebreak# MAN"
      /usr/bin/man "$cmd" 2>/dev/null
      pagebreak="\n---\n"
    fi

    if grep -q -m1 ^"$cmd"$ "$PRGDIR"/info.list 2>/dev/null; then
      echo -e "$pagebreak# INFO"
      /usr/bin/info "$cmd" 2>/dev/null
      pagebreak="\n---\n"
    fi

    if [[ -n $TLDR ]]; then
      if grep -q -m1 ^"$cmd"$ "$PRGDIR"/tldr.list 2>/dev/null; then
        echo -e "$pagebreak# TLDR\n"
        "$TLDR" -m "$cmd" 2>/dev/null | sed 's/`//g' |sed 's/{{//g' |sed 's/}}//g'
        pagebreak="\n---\n"
      fi
    fi

    if [[ -z $pagebreak ]]; then
      echo "No help information found for '$cmd'"
    fi

  ) | $MD2ANSI | less -RFSX

}

rebuild_help_lists() {
  echo "Update RTFM Help File Lists"
  echo

#  echo "Updating bash builtin command list"
#  builtin help -s | awk '{if(NR>1)print $1}' \
#      | sort -u \
#      | grep -v ^$ \
#    >"$PRGDIR"/builtin.list || true

  if [[ -n $TLDR ]]; then
    echo "Updating tldr command list"
    find "$HOME"/.local/share/tldr/pages.en/common -type f -exec basename -s '.md' {} \; 2>/dev/null \
        | sort -u \
        | grep -v ^$ \
      >"$PRGDIR"/tldr.list || true
  else
    >&2 echo "$PRG: tldr not installed on this machine"
  fi

  echo "Updating man command list"
  find /usr/share/man/man1 -type f -exec basename -s '.1.gz' {} \; 2>/dev/null \
      | sort -u \
      | grep -v ^$ \
    >"$PRGDIR"/man.list || true

  echo "Updating info command list"
  find /usr/share/info /usr/local/share/info -type f -name "*.info*" 2>/dev/null \
      | sed 's/\.info.*$//' | sed 's/.*\///' \
      | sort -u \
      | grep -v ^$ \
    >"$PRGDIR"/info.list || true
  echo
  true
}

install_update_rtfm() {
  local -i VERBOSE=0
  [[ ${1:-} == '--verbose' ]] && VERBOSE=1

  local -- REPOBASE BASEDIR repo installupdate='Installing'

  [[ -x /usr/local/share/rtfm ]] && installupdate='Updating'

  REPOBASE=https://github.com/Open-Technology-Foundation
  for repo in tldr md2ansi rtfm; do
    ((VERBOSE)) && echo "$PRG: $installupdate $repo from $REPOBASE"
    BASEDIR=/usr/local/share/"$repo"
    rm -rf ."$BASEDIR"
    /usr/bin/git clone -q "$REPOBASE"/"$repo" ."$BASEDIR"
    if [[ -d "$BASEDIR" ]]; then
      rm -rf "$BASEDIR".bak
      mv "$BASEDIR" "$BASEDIR".bak
    fi
    mv ".$BASEDIR" "$BASEDIR"
    rm -rf "$BASEDIR".bak

    if [[ $repo == rtfm ]]; then
      /usr/bin/ln -fs "$BASEDIR"/rtfm /usr/local/bin/rtfm
    elif [[ $repo == md2ansi ]]; then
      /usr/bin/ln -fs "$BASEDIR"/md2ansi /usr/local/bin/md2ansi
      /usr/bin/ln -fs "$BASEDIR"/md /usr/local/bin/md
    fi

    if ((VERBOSE)); then
      /usr/bin/ls -lh "$BASEDIR"* /usr/local/bin/"$repo" -d
      echo
    fi
  done
  echo "$PRG: $installupdate complete"
  exit 0
}

# catch install/update command
if ((EUID==0)); then
  if [[ "${1:-}" == installupdate ]]; then
    install_update_rtfm "${@:2}"; exit
  fi
fi

main "$@"

#fin

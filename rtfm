#!/usr/bin/env bash
set -euo pipefail
declare -- PRG0 PRGDIR PRG
PRG0="$(readlink -f -- "$0" 2>/dev/null || echo "$0")"
PRGDIR="${PRG0%/*}"
PRG="${PRG0##*/}"

declare -i VERBOSE=1

# Initialize COLUMNS for md2ansi if not already set
[[ -z "${COLUMNS:-}" ]] && COLUMNS=$(tput cols 2>/dev/null || echo 78)
declare -x COLUMNS

declare -- MD2ANSI
MD2ANSI=$(command -v md2ansi || echo 'cat -s -')

declare -- LESSx
LESSx=$(command -v less)

usage() {
  cat <<EOT
$PRG - Read The Fucking Manuals

A command-line utility that searches for documentation about
commands across multiple help systems.

Searches for command help in order:

1. Bash builtin help
2. Man pages
3. Info pages
4. TLDR pages

All found pages are concatenated.

Usage: $PRG [OPTIONS] command

Options:
  -r,--rebuild-lists  Rebuild command lists for each help command
  --install,--update  Install or update rtfm, md2ansi, and tldr
                      from GitHub (requires git)
  -h,--help           This help

Examples:
  $PRG rsync
  $PRG declare
  $PRG ls
  $PRG git
EOT
  exit "${1:-0}"
}

main() {
  local -- cmd='' pagebreak=''
  local -a files=()

  (( $# )) || >&2 usage 1

  while (($#)); do
    case $1 in
      -r|--rebuild-lists)
          can_sudo "$PRG" || exit 1
          rebuild_help_lists
          exit 0
              ;;
      --install|--update)
          can_sudo "$PRG" || exit 1
          local -- install_rtfm=/tmp/install_update_rtfm.sh
          sudo rm -f "$install_rtfm"
          {  echo '#!/usr/bin/env bash'
             echo 'set -euo pipefail'
             declare -p PRG VERBOSE
             declare -pf install_update_rtfm rebuild_help_lists can_sudo
             echo "can_sudo '$PRG' || exit 1"
             echo 'install_update_rtfm'
          } >"$install_rtfm"
          sudo chmod 700 "$install_rtfm"; sudo chown root:root "$install_rtfm"
          exec sudo "$install_rtfm"; exit 1
          ;;
      -q|--quiet)
          VERBOSE=0
          ;;
      help|-h|--help)
          usage 0 ;;
      -*) >&2 echo "$PRG: Invalid option '$1'" ;;
      *)  [[ -n $cmd ]] && { >&2 echo "$PRG: Too many arguments"; exit 22; }
          cmd="$1"
          ;;
    esac
    shift
  done

  ( if grep -q -m1 "^${cmd}$" "$PRGDIR"/builtin.list 2>/dev/null; then
      echo -e "# BUILTIN\n"
      builtin help -m "$cmd" 2>/dev/null || builtin help "$cmd"
      pagebreak="\n---\n"
    fi

    if grep -q -m1 ^"$cmd"$ "$PRGDIR"/man.list 2>/dev/null; then
      echo -e "$pagebreak# MAN"
      /usr/bin/man "$cmd" 2>/dev/null
      pagebreak="\n---\n"
    fi

    if grep -q -m1 ^"$cmd"$ "$PRGDIR"/info.list 2>/dev/null; then
      echo -e "$pagebreak# INFO"
      /usr/bin/info "$cmd" 2>/dev/null
      pagebreak="\n---\n"
    fi

    readarray -t files < <(find /usr/local/share/tldr/pages/common /usr/local/share/tldr/pages/linux -type f -name "$cmd".md 2>/dev/null)
    if ((${#files[@]})); then
      echo -e "$pagebreak# TLDR\n"
      cat -s -- "${files[0]}" | sed 's/`//g' |sed 's/{{//g' |sed 's/}}//g'
      pagebreak="\n---\n"
    fi

    if [[ -z $pagebreak ]]; then
      echo "No help found for '$cmd'"
    fi

  ) | $MD2ANSI | "$LESSx" -RFSX

}

rebuild_help_lists() {
  sudo mkdir -m 755 -p /usr/local/share/rtfm

  ((VERBOSE)) && echo "$PRG: Updating 'tldr' command list"
  sudo find /usr/local/share/tldr/pages/common/ /usr/local/share/tldr/pages/linux/ -type f -exec basename -s '.md' {} \; 2>/dev/null \
      | sort -u | grep -v ^$ \
    >/usr/local/share/rtfm/tldr.list || true

  ((VERBOSE)) && echo "$PRG: Updating 'man' command list"
  sudo find /usr/share/man/man1 -type f -exec basename -s '.1.gz' {} \; 2>/dev/null \
      | sort -u | grep -v ^$ \
    >/usr/local/share/rtfm/man.list || true

  ((VERBOSE)) && echo "$PRG: Updating 'info' command list"
  sudo find /usr/share/info /usr/local/share/info -type f -name "*.info*" 2>/dev/null \
      | sed 's/\.info.*$//' | sed 's/.*\///' \
      | sort -u | grep -v ^$ \
    >/usr/local/share/rtfm/info.list || true

  sudo chmod 644 /usr/local/share/rtfm/info.list /usr/local/share/rtfm/tldr.list /usr/local/share/rtfm/man.list
  return 0
}

install_update_rtfm() {
  if ! command -v git >/dev/null; then
    ((VERBOSE)) && echo "$PRG: Installing git..."
    /usr/bin/apt-get -qq update || true
    /usr/bin/apt-get -qq install git || true
  fi

  # already installed?
  local -- installupdate='Installing'
  [[ -f /usr/local/share/rtfm/rtfm ]] && installupdate='Updating'

  local -- REPOBASE=https://github.com/Open-Technology-Foundation
  local -- BASEDIR repo
  for repo in tldr md2ansi rtfm; do
    ((VERBOSE)) && echo "$PRG: $installupdate $REPOBASE/$repo"
    BASEDIR=/usr/local/share/"$repo"
    rm -rf "$BASEDIR".tmp
    /usr/bin/git clone -q "$REPOBASE"/"$repo" "$BASEDIR".tmp
    if [[ -d "$BASEDIR" ]]; then
      rm -rf "$BASEDIR".bak
      mv "$BASEDIR" "$BASEDIR".bak
    fi
    mv "$BASEDIR".tmp "$BASEDIR"
    rm -rf "$BASEDIR".bak
    chmod 755 "$BASEDIR"

    if [[ $repo == rtfm ]]; then
      chmod 755 "$BASEDIR"/rtfm
      /usr/bin/ln -fs "$BASEDIR"/rtfm /usr/local/bin/rtfm
    elif [[ $repo == md2ansi ]]; then
      chmod 755 "$BASEDIR"/md2ansi "$BASEDIR"/md
      /usr/bin/ln -fs "$BASEDIR"/md2ansi /usr/local/bin/md2ansi
      /usr/bin/ln -fs "$BASEDIR"/md /usr/local/bin/md
    fi
  done

  rebuild_help_lists

  ((VERBOSE)) && echo "$PRG: $installupdate complete"
  exit 0
}

can_sudo() {
  ((EUID)) || return 0
  # Check if sudo exists
  if ! command -v sudo &>/dev/null; then
    >&2 echo "${1:-}: Error: 'sudo' command not found. This operation requires root privileges."
    return 1
  fi
  # Check if user is in sudo/admin group (common sudo access indicator)
  if ! groups | grep -qE '\b(sudo|admin|wheel)\b'; then
    >&2 echo "${1:-}: Error: Your user account doesn't appear to have sudo privileges."
    >&2 echo "${1:-}: This operation requires root or sudo access."
    return 1
  fi
  # User has sudo command and appears to be in sudo group
  return 0
}

main "$@"

#fin
